// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: resource/v1alpha1/service.proto

package resourcev1alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ResourceAPI_ListResources_FullMethodName     = "/resource.v1alpha1.ResourceAPI/ListResources"
	ResourceAPI_GetResource_FullMethodName       = "/resource.v1alpha1.ResourceAPI/GetResource"
	ResourceAPI_CreateResource_FullMethodName    = "/resource.v1alpha1.ResourceAPI/CreateResource"
	ResourceAPI_UpdateResource_FullMethodName    = "/resource.v1alpha1.ResourceAPI/UpdateResource"
	ResourceAPI_DeleteResource_FullMethodName    = "/resource.v1alpha1.ResourceAPI/DeleteResource"
	ResourceAPI_ListSubResources_FullMethodName  = "/resource.v1alpha1.ResourceAPI/ListSubResources"
	ResourceAPI_GetSubResource_FullMethodName    = "/resource.v1alpha1.ResourceAPI/GetSubResource"
	ResourceAPI_CreateSubResource_FullMethodName = "/resource.v1alpha1.ResourceAPI/CreateSubResource"
	ResourceAPI_UpdateSubResource_FullMethodName = "/resource.v1alpha1.ResourceAPI/UpdateSubResource"
	ResourceAPI_DeleteSubResource_FullMethodName = "/resource.v1alpha1.ResourceAPI/DeleteSubResource"
)

// ResourceAPIClient is the client API for ResourceAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ResourceAPIClient interface {
	ListResources(ctx context.Context, in *ListResourcesRequest, opts ...grpc.CallOption) (*ListResourcesResponse, error)
	GetResource(ctx context.Context, in *GetResourceRequest, opts ...grpc.CallOption) (*GetResourceResponse, error)
	CreateResource(ctx context.Context, in *CreateResourceRequest, opts ...grpc.CallOption) (*CreateResourceResponse, error)
	UpdateResource(ctx context.Context, in *UpdateResourceRequest, opts ...grpc.CallOption) (*UpdateResourceResponse, error)
	DeleteResource(ctx context.Context, in *DeleteResourceRequest, opts ...grpc.CallOption) (*DeleteResourceResponse, error)
	ListSubResources(ctx context.Context, in *ListSubResourcesRequest, opts ...grpc.CallOption) (*ListSubResourcesResponse, error)
	GetSubResource(ctx context.Context, in *GetSubResourceRequest, opts ...grpc.CallOption) (*GetSubResourceResponse, error)
	CreateSubResource(ctx context.Context, in *CreateSubResourceRequest, opts ...grpc.CallOption) (*CreateSubResourceResponse, error)
	UpdateSubResource(ctx context.Context, in *UpdateSubResourceRequest, opts ...grpc.CallOption) (*UpdateSubResourceResponse, error)
	DeleteSubResource(ctx context.Context, in *DeleteSubResourceRequest, opts ...grpc.CallOption) (*DeleteSubResourceResponse, error)
}

type resourceAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewResourceAPIClient(cc grpc.ClientConnInterface) ResourceAPIClient {
	return &resourceAPIClient{cc}
}

func (c *resourceAPIClient) ListResources(ctx context.Context, in *ListResourcesRequest, opts ...grpc.CallOption) (*ListResourcesResponse, error) {
	out := new(ListResourcesResponse)
	err := c.cc.Invoke(ctx, ResourceAPI_ListResources_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceAPIClient) GetResource(ctx context.Context, in *GetResourceRequest, opts ...grpc.CallOption) (*GetResourceResponse, error) {
	out := new(GetResourceResponse)
	err := c.cc.Invoke(ctx, ResourceAPI_GetResource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceAPIClient) CreateResource(ctx context.Context, in *CreateResourceRequest, opts ...grpc.CallOption) (*CreateResourceResponse, error) {
	out := new(CreateResourceResponse)
	err := c.cc.Invoke(ctx, ResourceAPI_CreateResource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceAPIClient) UpdateResource(ctx context.Context, in *UpdateResourceRequest, opts ...grpc.CallOption) (*UpdateResourceResponse, error) {
	out := new(UpdateResourceResponse)
	err := c.cc.Invoke(ctx, ResourceAPI_UpdateResource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceAPIClient) DeleteResource(ctx context.Context, in *DeleteResourceRequest, opts ...grpc.CallOption) (*DeleteResourceResponse, error) {
	out := new(DeleteResourceResponse)
	err := c.cc.Invoke(ctx, ResourceAPI_DeleteResource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceAPIClient) ListSubResources(ctx context.Context, in *ListSubResourcesRequest, opts ...grpc.CallOption) (*ListSubResourcesResponse, error) {
	out := new(ListSubResourcesResponse)
	err := c.cc.Invoke(ctx, ResourceAPI_ListSubResources_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceAPIClient) GetSubResource(ctx context.Context, in *GetSubResourceRequest, opts ...grpc.CallOption) (*GetSubResourceResponse, error) {
	out := new(GetSubResourceResponse)
	err := c.cc.Invoke(ctx, ResourceAPI_GetSubResource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceAPIClient) CreateSubResource(ctx context.Context, in *CreateSubResourceRequest, opts ...grpc.CallOption) (*CreateSubResourceResponse, error) {
	out := new(CreateSubResourceResponse)
	err := c.cc.Invoke(ctx, ResourceAPI_CreateSubResource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceAPIClient) UpdateSubResource(ctx context.Context, in *UpdateSubResourceRequest, opts ...grpc.CallOption) (*UpdateSubResourceResponse, error) {
	out := new(UpdateSubResourceResponse)
	err := c.cc.Invoke(ctx, ResourceAPI_UpdateSubResource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceAPIClient) DeleteSubResource(ctx context.Context, in *DeleteSubResourceRequest, opts ...grpc.CallOption) (*DeleteSubResourceResponse, error) {
	out := new(DeleteSubResourceResponse)
	err := c.cc.Invoke(ctx, ResourceAPI_DeleteSubResource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ResourceAPIServer is the server API for ResourceAPI service.
// All implementations must embed UnimplementedResourceAPIServer
// for forward compatibility
type ResourceAPIServer interface {
	ListResources(context.Context, *ListResourcesRequest) (*ListResourcesResponse, error)
	GetResource(context.Context, *GetResourceRequest) (*GetResourceResponse, error)
	CreateResource(context.Context, *CreateResourceRequest) (*CreateResourceResponse, error)
	UpdateResource(context.Context, *UpdateResourceRequest) (*UpdateResourceResponse, error)
	DeleteResource(context.Context, *DeleteResourceRequest) (*DeleteResourceResponse, error)
	ListSubResources(context.Context, *ListSubResourcesRequest) (*ListSubResourcesResponse, error)
	GetSubResource(context.Context, *GetSubResourceRequest) (*GetSubResourceResponse, error)
	CreateSubResource(context.Context, *CreateSubResourceRequest) (*CreateSubResourceResponse, error)
	UpdateSubResource(context.Context, *UpdateSubResourceRequest) (*UpdateSubResourceResponse, error)
	DeleteSubResource(context.Context, *DeleteSubResourceRequest) (*DeleteSubResourceResponse, error)
	mustEmbedUnimplementedResourceAPIServer()
}

// UnimplementedResourceAPIServer must be embedded to have forward compatible implementations.
type UnimplementedResourceAPIServer struct {
}

func (UnimplementedResourceAPIServer) ListResources(context.Context, *ListResourcesRequest) (*ListResourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListResources not implemented")
}
func (UnimplementedResourceAPIServer) GetResource(context.Context, *GetResourceRequest) (*GetResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResource not implemented")
}
func (UnimplementedResourceAPIServer) CreateResource(context.Context, *CreateResourceRequest) (*CreateResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateResource not implemented")
}
func (UnimplementedResourceAPIServer) UpdateResource(context.Context, *UpdateResourceRequest) (*UpdateResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateResource not implemented")
}
func (UnimplementedResourceAPIServer) DeleteResource(context.Context, *DeleteResourceRequest) (*DeleteResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteResource not implemented")
}
func (UnimplementedResourceAPIServer) ListSubResources(context.Context, *ListSubResourcesRequest) (*ListSubResourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSubResources not implemented")
}
func (UnimplementedResourceAPIServer) GetSubResource(context.Context, *GetSubResourceRequest) (*GetSubResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubResource not implemented")
}
func (UnimplementedResourceAPIServer) CreateSubResource(context.Context, *CreateSubResourceRequest) (*CreateSubResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSubResource not implemented")
}
func (UnimplementedResourceAPIServer) UpdateSubResource(context.Context, *UpdateSubResourceRequest) (*UpdateSubResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSubResource not implemented")
}
func (UnimplementedResourceAPIServer) DeleteSubResource(context.Context, *DeleteSubResourceRequest) (*DeleteSubResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSubResource not implemented")
}
func (UnimplementedResourceAPIServer) mustEmbedUnimplementedResourceAPIServer() {}

// UnsafeResourceAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ResourceAPIServer will
// result in compilation errors.
type UnsafeResourceAPIServer interface {
	mustEmbedUnimplementedResourceAPIServer()
}

func RegisterResourceAPIServer(s grpc.ServiceRegistrar, srv ResourceAPIServer) {
	s.RegisterService(&ResourceAPI_ServiceDesc, srv)
}

func _ResourceAPI_ListResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListResourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceAPIServer).ListResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceAPI_ListResources_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceAPIServer).ListResources(ctx, req.(*ListResourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceAPI_GetResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceAPIServer).GetResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceAPI_GetResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceAPIServer).GetResource(ctx, req.(*GetResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceAPI_CreateResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceAPIServer).CreateResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceAPI_CreateResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceAPIServer).CreateResource(ctx, req.(*CreateResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceAPI_UpdateResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceAPIServer).UpdateResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceAPI_UpdateResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceAPIServer).UpdateResource(ctx, req.(*UpdateResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceAPI_DeleteResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceAPIServer).DeleteResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceAPI_DeleteResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceAPIServer).DeleteResource(ctx, req.(*DeleteResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceAPI_ListSubResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSubResourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceAPIServer).ListSubResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceAPI_ListSubResources_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceAPIServer).ListSubResources(ctx, req.(*ListSubResourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceAPI_GetSubResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceAPIServer).GetSubResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceAPI_GetSubResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceAPIServer).GetSubResource(ctx, req.(*GetSubResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceAPI_CreateSubResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSubResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceAPIServer).CreateSubResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceAPI_CreateSubResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceAPIServer).CreateSubResource(ctx, req.(*CreateSubResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceAPI_UpdateSubResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSubResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceAPIServer).UpdateSubResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceAPI_UpdateSubResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceAPIServer).UpdateSubResource(ctx, req.(*UpdateSubResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceAPI_DeleteSubResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSubResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceAPIServer).DeleteSubResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceAPI_DeleteSubResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceAPIServer).DeleteSubResource(ctx, req.(*DeleteSubResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ResourceAPI_ServiceDesc is the grpc.ServiceDesc for ResourceAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ResourceAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "resource.v1alpha1.ResourceAPI",
	HandlerType: (*ResourceAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListResources",
			Handler:    _ResourceAPI_ListResources_Handler,
		},
		{
			MethodName: "GetResource",
			Handler:    _ResourceAPI_GetResource_Handler,
		},
		{
			MethodName: "CreateResource",
			Handler:    _ResourceAPI_CreateResource_Handler,
		},
		{
			MethodName: "UpdateResource",
			Handler:    _ResourceAPI_UpdateResource_Handler,
		},
		{
			MethodName: "DeleteResource",
			Handler:    _ResourceAPI_DeleteResource_Handler,
		},
		{
			MethodName: "ListSubResources",
			Handler:    _ResourceAPI_ListSubResources_Handler,
		},
		{
			MethodName: "GetSubResource",
			Handler:    _ResourceAPI_GetSubResource_Handler,
		},
		{
			MethodName: "CreateSubResource",
			Handler:    _ResourceAPI_CreateSubResource_Handler,
		},
		{
			MethodName: "UpdateSubResource",
			Handler:    _ResourceAPI_UpdateSubResource_Handler,
		},
		{
			MethodName: "DeleteSubResource",
			Handler:    _ResourceAPI_DeleteSubResource_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "resource/v1alpha1/service.proto",
}
